.. _install-docker:

=================================================
Install with a Containerized Cluster Using Docker
=================================================

.. default-domain:: mongodb

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

You can install Relational Migrator with Kafka in a containerized environment 
using `Docker <https://docs.docker.com/engine/>`__. This method configures Kafka 
to store data locally in Docker containers. Use this method if you want to learn 
how to configure your own multi-server Kafka environment. 

.. warning::

   This deployment method is not recommended for production workloads. 

About this Task
---------------

`Docker volumes <https://docs.docker.com/storage/volumes/>`__ can be used for 
persisting data if a container stops running or is restarted. 

Before you Begin
----------------

You must have Docker installed on your computer. For more information, see  
`Install Docker Engine <https://docs.docker.com/engine/install/>`__. 

Steps
-----

.. procedure::
   :style: normal

   .. step:: Install a Kafka cluster

      Use the following ``docker-compose`` configuration as an example to install a new 
      Kafka cluster, or connect to an existing cluster.

      See the following ``docker-compose`` example:

      .. code-block::

         version: '3'
         services:
           kafka-1:
           image: quay.io/debezium/kafka:2.2
           ports:
             - 19092:9092
             - 19093:9093
           environment:
             CLUSTER_ID: oh-sxaDRTcyAr6pFRbXyzA
             BROKER_ID: 1
             KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093
             NODE_ROLE: controller,broker
           healthcheck:
             test: ["CMD-SHELL", "./bin/kafka-topics.sh --version"]
             interval: 5s
             timeout: 10s
             retries: 10

   .. step:: Install a Kafka Connect cluster

      Install a Kafka Connect cluster with the ``relational-migrator-connect`` image 
      from the public Amazon ECR: ``public.ecr.aws/v4d7k6c9/relational-migrator:latest``.

      See the following ``docker-compose`` example:

      .. code-block::

         version: '3'
         services:
         â€¦
            connect:
            image: quay.io/debezium/connect:2.3.0.Final
            ports:
              - 8083:8083
              - 9876:9876
            depends_on:
            kafka-1:
               condition: service_healthy
            deploy:
               resources:
                 reservations:
                   memory: 2G
            environment:
               BOOTSTRAP_SERVERS: kafka-1:9092
               GROUP_ID: 1
               CONFIG_STORAGE_TOPIC: my_connect_configs
               OFFSET_STORAGE_TOPIC: my_connect_offsets
               STATUS_STORAGE_TOPIC: my_connect_statuses
               CONNECT_METADATA_MAX_AGE_MS: 5000
               CONNECT_AUTO_OFFSET_RESET: earliest
               JMX_PORT: 9876
               KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote=true
               -Dcom.sun.management.jmxremote.authenticate=false
               -Dcom.sun.management.jmxremote.ssl=false
               -Djava.rmi.server.hostname=connect
               -Dcom.sun.management.jmxremote.port=9876"
            volumes:
               -${MIGRATOR_PATH_DRIVER}/ojdbc11.jar:/kafka/connect/
         debezium-connector-oracle/ojdbc11.jar
               - ${MIGRATOR_CONNECT_PATH}:/kafka/connect/kafka-connect-migrator

   .. step:: Install Relational Migrator

      You have two options for installing Relational Migrator:

      1. From the `download center <https://www.mongodb.com/try/download/relational-migrator>`__, 
         select the appropriate Relational Migrator installer.

      #. Create a docker image using a Relational Migrator installer.
       
         See the following ``docker-compose`` example:

         .. code-block::

            version: '3'
            services:
            migrator:
               image: public.ecr.aws/v4d7k6c9/relational-migrator:latest
               container_name: migrator
               ports:
                  - "8080:8080"
               environment:
                  SPRING_PROFILES_ACTIVE: kafka
                  MIGRATOR_KAFKA_BOOTSTRAP_SERVERS:kafka-1:9092
                  MIGRATOR_KAFKA_CONNECT_URL:kafka-connect:8083
                  MIGRATOR_KAFKA_ENABLE_TOPIC_CLEANUP: "true"
                  MIGRATOR_KAFKA_CONNECT_METRICS_JMX_SERVICE_URL:    
                     "service:jmx:rmi:///jndi/rmi://connect:9876/jmxrmi"
               volumes:
                  - ${MIGRATOR_PATH_DRIVER}:/opt/mongodb-relational-migrator/lib/app/lib
                  - ${MIGRATOR_PATH_DATA}:/root/Migrator

         For a complete example, you can download the following ``docker-compose``: 
         `Containerised kafka-connect cluster with Relational Migrator 
         <https://migrator-installer-repository.s3-ap-southeast-2.amazonaws.com/1.4.3/docker-compose-migrator-single-kafka.yml>`__.

   .. step:: If your source database is MySQL or Oracle, add their related drivers

      Relational Migrator uses the JDBC driver of the respective source database to read 
      database schema. It bundles SQL Server and PostgreSQL JDBC drivers. For MySQL and 
      Oracle, you must add their drivers to the following path:

      ``<path-to-installation>/mongodb-relational-migrator/lib/app/lib``
      
      - Oracle: `21.6.0.0 of odjbc11.jar from the Oracle 21c
        <https://www.oracle.com/database/technologies/appdev/jdbc-drivers-archive.html>`__
      - MySQL: `latest 8.0.x version, Platform Independent Version 
        <https://dev.mysql.com/downloads/connector/j/>`__


Learn More
----------

- :ref:`kafka-intro`
- :ref:`install-confluent-kafka` 
- :ref:`install-kafka-cluster`
- `Docker Engine Overview <https://docs.docker.com/engine/>`__
